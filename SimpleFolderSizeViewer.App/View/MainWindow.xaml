<Window x:Class="SimpleFolderSizeViewer.App.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
        xmlns:local="clr-namespace:SimpleFolderSizeViewer.App"
        xmlns:model="clr-namespace:SimpleFolderSizeViewer.Core.DataModel;assembly=SimpleFolderSizeViewer.Core"
        mc:Ignorable="d"
        Title="SimpleFolderSizeViewer" Height="650" Width="1200" DataContext="{Binding Source={StaticResource Locator}, Path=Main}">
    <Window.Resources>
        <local:BoolToVisibilityConverter x:Key="BoolToVisibility"/>
        <local:IconToImageSourceConverter x:Key="IconToImageSource"/>
        <local:EnumToBoolConverter x:Key="EnumToBool"/>
        <local:BindingProxy x:Key="NameProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsNameVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="CreationTimeProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsCreationTimeVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="SizeProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsSizeVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="ExtensionProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsExtensionVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="PercentProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsPercentVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="FolderCountProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsSubFolderCountVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="FileCountProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsSubFileCountVisible, Converter={StaticResource BoolToVisibility}}"/>
        <local:BindingProxy x:Key="ModifiedTimeProxy" Data="{Binding ColumnSettingsViewModel.ColumnSettings.IsModifiedTimeVisible, Converter={StaticResource BoolToVisibility}}"/>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="350.4"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="32"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <ToolBarTray DataContext="{Binding CommandViewModel}" Grid.ColumnSpan="2" Background="Transparent">
            <ToolBarTray.Resources>
                <Style TargetType="{x:Type Image}">
                    <Setter Property="Height" Value="23"/>
                </Style>
                <Style x:Key="toggleBtn" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Width" Value="30"/>
                    <Setter Property="FontWeight" Value="Medium"/>
                    <Setter Property="FontSize" Value="16"/>
                </Style>
            </ToolBarTray.Resources>
            <ToolBar Background="Transparent">
                <Button Command="{Binding MovePrevFolderCommand}" ToolTip="Move prevous folder">
                    <Image Source="pack://application:,,,/Resources/prev.png"/>
                </Button>
                <Button Command="{Binding MoveNextFolderCommand}"  ToolTip="Move next folder">
                    <Image Source="pack://application:,,,/Resources/next.png"/>
                </Button>
                <Button Command="{Binding MoveParentFolderCommand}"  ToolTip="Move parent folder">
                    <Image Source="pack://application:,,,/Resources/up.png"/>
                </Button>
                <Button Command="{Binding MoveRootFolderCommand}"  ToolTip="Move root folder">
                    <Image Source="pack://application:,,,/Resources/home.png"/>
                </Button>
                <Separator />
                <Button Command="{Binding OpenCommand}" ToolTip="Open folder with scanning">
                    <Image Source="pack://application:,,,/Resources/open.png"/>
                </Button>
                <Button Command="{Binding ScanCommand}" ToolTip="Scan All">
                    <Image Source="pack://application:,,,/Resources/scan.png"/>
                </Button>
                <Separator />
                <Button Command="{Binding ShowColumnSettingsCommand}" ToolTip="Column settings" >
                    <Image Source="pack://application:,,,/Resources/settings.png"/>
                </Button>
                <Button Command="{Binding ShowErrorLogDialogCommand}"  ToolTip="Error log">
                    <Image Source="pack://application:,,,/Resources/error.png"/>
                </Button>
                <ToggleButton Command="{Binding ShowFilterDialogCommand}" 
                              IsChecked="{Binding FilteringViewModel.CanFilter}" 
                              ToolTip="Filtering" BorderBrush="Transparent">
                    <Image Source="pack://application:,,,/Resources/filter.png"/>
                </ToggleButton>
                <Separator />
                <RadioButton Command="{Binding SetFolderSizeUnitCommand}" IsChecked="{Binding Path=(model:FileSize.Unit), Converter={StaticResource EnumToBool}, ConverterParameter={x:Static model:SizeUnit.B}}"
                             Style="{StaticResource toggleBtn}" Content="B"/>
                <RadioButton Command="{Binding SetFolderSizeUnitCommand}" IsChecked="{Binding Path=(model:FileSize.Unit), Converter={StaticResource EnumToBool}, ConverterParameter={x:Static model:SizeUnit.KB}}"
                             Style="{StaticResource toggleBtn}" Content="KB"/>
                <RadioButton Command="{Binding SetFolderSizeUnitCommand}" IsChecked="{Binding Path=(model:FileSize.Unit), Converter={StaticResource EnumToBool}, ConverterParameter={x:Static model:SizeUnit.MB}}"
                             Style="{StaticResource toggleBtn}" Content="MB"/>
                <RadioButton Command="{Binding SetFolderSizeUnitCommand}" IsChecked="{Binding Path=(model:FileSize.Unit), Converter={StaticResource EnumToBool}, ConverterParameter={x:Static model:SizeUnit.GB}}"
                             Style="{StaticResource toggleBtn}" Content="GB"/>
                <Separator />
            </ToolBar>
        </ToolBarTray>

        <TreeView DataContext="{Binding FolderTreeViewModel}" 
                  ItemsSource="{Binding FolderTree}"
                  Name="folderTree" Grid.Row="1" >
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding UpdateSelectedFolderCommand}" 
                                           CommandParameter="{Binding ElementName=folderTree, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding SubFolders}">
                    <StackPanel Orientation="Horizontal" Margin="3">
                        <Image Source="{Binding Entity.Icon, Converter={StaticResource IconToImageSource}}" Margin="0,0,3,0"/>
                        <TextBlock Text="{Binding Entity.Name}" Width="200"/>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>

        <DataGrid DataContext="{Binding FolderContentViewModel}" 
                  ItemsSource="{Binding SubNodes}"  
                  Name="dgFolderContent"
                  Grid.Row="1"  Grid.Column="1" Background="White"
                  AutoGenerateColumns="False" GridLinesVisibility="None" HeadersVisibility="Column">
            <DataGrid.InputBindings>
                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding UpdateSelectedFolderCommand}"
                                           CommandParameter="{Binding SelectedItem, ElementName=dgFolderContent}"/>
            </DataGrid.InputBindings>
            <!--<i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding UpdateSelectedFolderCommand}"
                                           CommandParameter="{Binding SelectedItem, ElementName=dgFolderContent}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>-->
            <DataGrid.CellStyle>
                <Style TargetType="{x:Type DataGridCell}">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image Source="{Binding Entity.Icon, Converter={StaticResource IconToImageSource}}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Binding="{Binding Entity.Name}" 
                                    Visibility="{Binding Data, Source={StaticResource NameProxy}}"
                                    Header="Name" Width="2*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding SizeFormat}"
                                    Visibility="{Binding Data, Source={StaticResource SizeProxy}}"
                                    Header="Size" Width="*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding Entity.Percent, StringFormat=P2}"
                                    Visibility="{Binding Data, Source={StaticResource PercentProxy}}" 
                                    Header="Percent" Width="*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding Entity.Extension}"
                                    Visibility="{Binding Data, Source={StaticResource ExtensionProxy}}"
                                    Header="Type" Width="*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding Entity.SubFolderCount}"
                                    Visibility="{Binding Data, Source={StaticResource FolderCountProxy}}"
                                    Header="SubFolderCount" Width="*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding Entity.SubFileCount}"
                                    Visibility="{Binding Data, Source={StaticResource FileCountProxy}}"
                                    Header="SubFileCount" Width="*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding Entity.CreationTime}" 
                                    Visibility="{Binding Data, Source={StaticResource CreationTimeProxy}}"
                                    Header="CreationTime" Width="*" IsReadOnly="True"/>
                <DataGridTextColumn Binding="{Binding Entity.LastModifiedTime}"
                                    Visibility="{Binding Data, Source={StaticResource ModifiedTimeProxy}}" 
                                    Header="LastModifiedTime" Width="*" IsReadOnly="True"/>
            </DataGrid.Columns>
        </DataGrid>

    </Grid>
</Window>
